"use strict";(self.webpackChunkapuntes_psp=self.webpackChunkapuntes_psp||[]).push([[896],{8327:(e,a,o)=>{o.r(a),o.d(a,{data:()=>r});const r={key:"v-a8728f2e",path:"/es/unit2/",title:"2 Introducción",lang:"es-ES",frontmatter:{title:"2 Introducción"},excerpt:"",headers:[{level:2,title:"Objetivos",slug:"objetivos",children:[]}],filePathRelative:"es/unit2/index.md",git:{updatedTime:1631440036e3,contributors:[{name:"Vicente Martínez",email:"vicente@iesdoctorbalmis.com",commits:1}]}}},5236:(e,a,o)=>{o.r(a),o.d(a,{default:()=>s});const r=(0,o(6252).uE)('<h1 id="tema-2-programacion-de-procesos" tabindex="-1">Tema 2. Programación de procesos</h1><p>Una vez hemos aprendido a diferenciar entre programas, procesos e hilos, en este segundo tema vamos a aprender cómo desde un programa creado por nosotros podemos lanzar otros programas.</p><p>Además de lanzarlos, al establecerse una relación padre-hijo estos procesos pueden comunicarse entre sí intercambiando información. De esta forma nuestros programas podrán lanzar otras aplicaciones, comandos del SO e incluso otras aplicaciones nuestras, permitiendo cierto grado de sincronización y comunicación entre ellas.</p><h2 id="objetivos" tabindex="-1">Objetivos</h2><p>Los objetivos que alcanzaremos tras esta unidad son:</p><ul><li>Conocer las clases de Java para la creación de procesos</li><li>Monitorizar y controlar el ciclo de vida de un proceso</li><li>Controlar la comunicación entre procesos padre/hijo</li><li>Usar métodos para la sincronización entre procesos y subprocesos</li><li>Entender el mecanismo de comunicación mediante tuberías (pipes)</li><li>Aprender la sintaxis y uso del comando curl para probar API REST desde un programa</li><li>Crear programas que ejecuten tareas en paralelo.</li></ul>',6),s={render:function(e,a){return r}}}}]);