"use strict";(self.webpackChunkapuntes_psp=self.webpackChunkapuntes_psp||[]).push([[284],{546:(e,s,n)=>{n.r(s),n.d(s,{data:()=>l});const l={key:"v-5aa74f15",path:"/en/unit1/concurrency.html",title:"1.2 Concurrency",lang:"en-US",frontmatter:{title:"1.2 Concurrency"},excerpt:"",headers:[{level:2,title:"1.2.1. Concurrency vs Parallelism",slug:"_1-2-1-concurrency-vs-parallelism",children:[{level:3,title:"Monoprocess",slug:"monoprocess",children:[]},{level:3,title:"Multitasking",slug:"multitasking",children:[]},{level:3,title:"Parallelism",slug:"parallelism",children:[]}]},{level:2,title:"1.2.2. Distributed systems",slug:"_1-2-2-distributed-systems",children:[]},{level:2,title:"1.2.3. Advantages and disadvantages",slug:"_1-2-3-advantages-and-disadvantages",children:[]},{level:2,title:"1.2.4. Condiciones de Bernstein",slug:"_1-2-4-condiciones-de-bernstein",children:[]}],filePathRelative:"en/unit1/concurrency.md",git:{updatedTime:1631440036e3,contributors:[{name:"Vicente Martínez",email:"vicente@iesdoctorbalmis.com",commits:1}]}}},9819:(e,s,n)=>{n.r(s),n.d(s,{default:()=>Te});var l=n(6252),t=n(3804),a=n(3784),o=n(9431);const i=(0,l._)("h1",{id:"_1-2-concurrency",tabindex:"-1"},"1.2. Concurrency",-1),r={class:"table-of-contents"},u=(0,l.Uk)("1.2.1. Concurrency vs Parallelism"),c=(0,l.Uk)("Monoprocess"),p=(0,l.Uk)("Multitasking"),m=(0,l.Uk)("Parallelism"),_=(0,l.Uk)("1.2.2. Distributed systems"),b=(0,l.Uk)("1.2.3. Advantages and disadvantages"),d=(0,l.Uk)("1.2.4. Condiciones de Bernstein"),h=(0,l.Uk)("According to the "),y={href:"https://www.collinsdictionary.com/es/diccionario/ingles/concurrency",target:"_blank",rel:"noopener noreferrer"},g=(0,l.Uk)("Collins dictionary"),k=(0,l.Uk)(" some of the senses os the word concurrency are"),f=(0,l._)("blockquote",null,[(0,l._)("p",null,"Ccooperation or combination. Simultaneous occurrence; coincidence.")],-1),A=(0,l._)("p",null,[(0,l.Uk)("If we change occurrence to "),(0,l._)("code",null,"process"),(0,l.Uk)(", we get a definition closer to its sense in the computer science.")],-1),v=(0,l._)("p",null,[(0,l.Uk)("This is not the first time the word "),(0,l._)("code",null,"process"),(0,l.Uk)(" appears, that is because they are one of the most important concepts in programming.")],-1),w=(0,l._)("h2",{id:"_1-2-1-concurrency-vs-parallelism",tabindex:"-1"},"1.2.1. Concurrency vs Parallelism",-1),S=(0,l._)("p",null,"Now that we already know what a process is, let's look at its relationship with the hardware where they are run.",-1),U=(0,l._)("h3",{id:"monoprocess",tabindex:"-1"},"Monoprocess",-1),E=(0,l._)("p",null,"Maybe we want to run many processes at the same time, but if we only have one processor unit, it's absolutely impossible to have more than one task running at the same time.",-1),x=(0,l._)("p",null,"One possibility is to run the tasks in sequence. The system starts running one process and it doesn't start with the next one until the current task has completely finished. That is what happens in systems that are able to do one task at a time, something really strange nowadays.",-1),D=(0,l._)("p",null,[(0,l._)("img",{src:t,alt:"Sequential execution of tasks (monoprocessor system)"})],-1),B=(0,l._)("h3",{id:"multitasking",tabindex:"-1"},"Multitasking",-1),C=(0,l._)("p",null,"In a multiprogramming system there are one or more programs loaded in main memory which are ready to execute. Only one program at a time is able to get the CPU for executing its instructions while all the others are waiting their turn.",-1),T=(0,l._)("p",null,"The main idea of multiprogramming is to maximize the use of CPU time. Indeed, suppose the currently running process is performing an I/O task (which, by definition, does not need the CPU to be accomplished). Then, the OS may interrupt that process and give the control to one of the other in-main-memory programs that are ready to execute (i.e. process context switching). It is said that running processes are multiplexed on time.",-1),F=(0,l._)("p",null,[(0,l.Uk)("This way, the OS gives as the illusion that many processes are running simultaneously. That is commonly called "),(0,l._)("code",null,"multitasking"),(0,l.Uk)(".")],-1),L=(0,l._)("p",null,[(0,l._)("img",{src:a,alt:"Concurrent execution of tasks (monoprocessor system)"})],-1),I=(0,l._)("p",null,"On both previous images can be observed how the total CPU time to complete all processes is the same in both models. Nonetheless, on the second model the user has the sensation that all tasks are running at the same time.",-1),P=(0,l._)("h3",{id:"parallelism",tabindex:"-1"},"Parallelism",-1),W=(0,l._)("p",null,"Multiprocessing sometimes refers to executing multiple processes (programs) at the same time. This might be misleading because we have already introduced the term “multiprogramming” to describe that before. In fact, multiprocessing refers to the hardware (i.e., the CPU units) rather than the software (i.e., running processes). If the underlying hardware provides more than one processor then that is multiprocessing. Several variations on the basic scheme exist, e.g., multiple cores on one die or multiple dies in one package or multiple packages in one system. Anyway, a system can be both multiprogrammed by having multiple programs running at the same time and multiprocessing by having more than one physical processor.",-1),j=(0,l._)("p",null,[(0,l.Uk)("Nowadays most devices, from desktop to laptops through mobile devices and IoT, all of them offer multiprocess capabilities, that is, they have mor than one processing unit to really do many tasks at the same time, no simulate it. This kind of execution is called "),(0,l._)("code",null,"parallelism"),(0,l.Uk)(".")],-1),z=(0,l._)("p",null,[(0,l._)("img",{src:o,alt:"Parallel execution of tasks (dual processor system)"})],-1),M=(0,l._)("p",null,"The bigger the processor units number is, the less time the tasks it takes to run and the user will have a better experience. This is one of the goals of operating systems, schedule properly the tasks to minimize running times, wait times and to maximize the resources use , mainly the processors.",-1),O=(0,l._)("div",{class:"custom-container question"},[(0,l._)("p",{class:"custom-container-title"},"cores vs threads"),(0,l._)("p",null,[(0,l.Uk)("have you bought a microprocessor recently? Are you up-to-date in the state of the art of hardware? Then, you'll probably know that one of the main characteristics of a microprocessor are its "),(0,l._)("strong",null,"cores number"),(0,l.Uk)(" (4, 8, 16).")]),(0,l._)("p",null,[(0,l.Uk)("Moreover, the number of cores is completed with another configuration, "),(0,l._)("strong",null,"treads number"),(0,l.Uk)(", that usually is twice the number of cores.")]),(0,l._)("p",null,"¿What is the relationship between processor threads and concurrency? ¿A computer system with 8 cores / 16 threads means that it can run up to 16 process in parallel?")],-1),q=(0,l._)("h2",{id:"_1-2-2-distributed-systems",tabindex:"-1"},"1.2.2. Distributed systems",-1),H=(0,l._)("blockquote",null,[(0,l._)("p",null,'"A collection of independent computers that appears to its users as a single. coherent system"'),(0,l._)("p",null,'"Andrew S. Tanembaum"')],-1),N=(0,l._)("p",null,"This definition has several important aspects:",-1),R=(0,l._)("ul",null,[(0,l._)("li",null,"The first one is that a distributed system consists of components (i.e., computers) that are autonomous."),(0,l._)("li",null,"A second aspect is that users (people or programs) think they are dealing with a single system. This means that one way or the other the autonomous components need to collaborate. How to establish this collaboration lies at the heart of developing distributed systems")],-1),G=(0,l._)("p",null,[(0,l.Uk)("The most known and famous example of distributed system is "),(0,l._)("code",null,"the Internet"),(0,l.Uk)(". The Internet is seen by the users as a single huge documents repository, that is, a single system able to provide almost any information or service. Notwithstanding the above, we know that is made up of millions of devices located all over the world and interconnected.")],-1),J=(0,l._)("p",null,[(0,l.Uk)("It began with the need to share resources. Actually the state-of-the-art on these systems are "),(0,l._)("code",null,"Cloud Computing"),(0,l.Uk)(" or cloud services. It's said that a distributed system is where software components are distributed on a network and they communicate and coordinate with each other by using message passing.")],-1),V=(0,l._)("p",null,"Let's concentrate on important characteristics of distributed systems:",-1),Y=(0,l._)("ul",null,[(0,l._)("li",null,"Concurrency. Allows running multiple process in parallel."),(0,l._)("li",null,"Global watch independency. Implies synchronization using messaging."),(0,l._)("li",null,"Scalability: distributed systems should also be relatively easy to expand or scale. This characteristic is a direct consequence of having independent computers, but at the same time, hiding how these computers actually take part in the system as a whole."),(0,l._)("li",null,"Fault tolerance: A distributed system will normally be continuously available, although perhaps some parts may be temporarily out of order.")],-1),K=(0,l._)("h2",{id:"_1-2-3-advantages-and-disadvantages",tabindex:"-1"},"1.2.3. Advantages and disadvantages",-1),Q=(0,l._)("p",null,"Pros of parallel processing:",-1),X=(0,l._)("ul",null,[(0,l._)("li",null,"Simultaneous running of tasks"),(0,l._)("li",null,"Reduce total running time"),(0,l._)("li",null,"Helps to solve big and complex problems"),(0,l._)("li",null,"Use of non local resources on the network"),(0,l._)("li",null,"Reduce expenses by taking advantage of shared resources. It's not necessary to invest on a supercomputer because it's possible to have the same processing power with smaller computers distributed")],-1),Z=(0,l._)("p",null,"Cons of parallel processing:",-1),$=(0,l._)("li",null,"Compilers and development environments are more complex to develop.",-1),ee=(0,l._)("li",null,"Parallel programs are more difficult to write",-1),se=(0,l._)("li",null,"Higher power consumption",-1),ne=(0,l._)("li",null,"Bigger data access complexity",-1),le=(0,l.Uk)("High communication and synchronization complexity on subtasks "),te=(0,l._)("p",null,"Pros of distributed programming",-1),ae=(0,l._)("ul",null,[(0,l._)("li",null,"Resource & data sharing"),(0,l._)("li",null,"Scale under demand"),(0,l._)("li",null,"Bigger flexibility to distribute processing load"),(0,l._)("li",null,"High availability"),(0,l._)("li",null,"Support for distributed applications"),(0,l._)("li",null,"Open philosophy and heterogeneous development")],-1),oe=(0,l._)("div",{class:"custom-container question"},[(0,l._)("p",{class:"custom-container-title"},"Scalability"),(0,l._)("p",null,"Scalability means the possibility of increase the processing, storage, and capabilities of a system"),(0,l._)("p",null,[(0,l.Uk)("Research about differences, pros and cons of "),(0,l._)("code",null,"vertical scaling"),(0,l.Uk)(" vs "),(0,l._)("code",null,"horizontal scaling"),(0,l.Uk)(".")])],-1),ie=(0,l._)("p",null,"Cons of distributed programming",-1),re=(0,l._)("ul",null,[(0,l._)("li",null,"Increase system complexity"),(0,l._)("li",null,"New specialized software is needed"),(0,l._)("li",null,"Communication problems (data lost, overflows, saturation, etc.)"),(0,l._)("li",null,"Security problems, DDoS attacks")],-1),ue=(0,l._)("p",null,"Distributed and parallel programming examples",-1),ce=(0,l._)("ul",null,[(0,l._)("li",null,"Weather forecast analysis and research"),(0,l._)("li",null,"Human genome research"),(0,l._)("li",null,"Biosphere modelling"),(0,l._)("li",null,"Seismic predictions"),(0,l._)("li",null,"Molecule simulation")],-1),pe={class:"custom-container info"},me=(0,l._)("p",{class:"custom-container-title"},"Example of parallel and distributed programming",-1),_e={href:"https://setiathome.berkeley.edu/sah_about.php",target:"_blank",rel:"noopener noreferrer"},be=(0,l.Uk)("Allien intelligence research- SETI Project"),de=(0,l._)("h2",{id:"_1-2-4-condiciones-de-bernstein",tabindex:"-1"},"1.2.4. Condiciones de Bernstein",-1),he=(0,l._)("p",null,"Once we know what a concurrent program is and the different hardware architectures that support them, let's try to identify which program parts can be executed concurrently.",-1),ye=(0,l._)("p",null,"If we look at the following code we can determine that the first sentence must be run before the second one in order to get always the same result (for the same input data set).",-1),ge=(0,l._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,l._)("pre",{class:"shiki",style:{"background-color":"#FAFAFA"}},[(0,l._)("code",null,[(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"x "),(0,l._)("span",{style:{color:"#39ADB5"}},"="),(0,l._)("span",{style:{color:"#90A4AE"}}," x "),(0,l._)("span",{style:{color:"#39ADB5"}},"+"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#F76D47"}},"1"),(0,l._)("span",{style:{color:"#39ADB5"}},";")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"y "),(0,l._)("span",{style:{color:"#39ADB5"}},"="),(0,l._)("span",{style:{color:"#90A4AE"}}," x "),(0,l._)("span",{style:{color:"#39ADB5"}},"+"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#F76D47"}},"1"),(0,l._)("span",{style:{color:"#39ADB5"}},";")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"})])]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br")])],-1),ke=(0,l._)("p",null,"Though in the following code the order isn't important at all and doesn't change the final result (output data set). In this situation all of them cam be run at the same time increasing processing speed.",-1),fe=(0,l._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,l._)("pre",{class:"shiki",style:{"background-color":"#FAFAFA"}},[(0,l._)("code",null,[(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"x "),(0,l._)("span",{style:{color:"#39ADB5"}},"="),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#F76D47"}},"1"),(0,l._)("span",{style:{color:"#39ADB5"}},";")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"y "),(0,l._)("span",{style:{color:"#39ADB5"}},"="),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#F76D47"}},"2"),(0,l._)("span",{style:{color:"#39ADB5"}},";")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"z "),(0,l._)("span",{style:{color:"#39ADB5"}},"="),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#F76D47"}},"3"),(0,l._)("span",{style:{color:"#39ADB5"}},";")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"})])]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br")])],-1),Ae=(0,l._)("p",null,[(0,l.Uk)("A.J. Bernstein’s Conditions are the conditions applied on two statements S1 and S2 that are to be executed in the processor. It states that three conditions that are explained below must be satisfied for two successive statements S"),(0,l._)("sub",null,"i"),(0,l.Uk)(" y S"),(0,l._)("sub",null,"j"),(0,l.Uk)(" to be executed concurrently and still produce the same result")],-1),ve=(0,l._)("p",null,"Bernstein conditions are rely on the subsequent two sets of variables:",-1),we=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Uk)("L(S"),(0,l._)("sub",null,"k"),(0,l.Uk)(") = {a"),(0,l._)("sub",null,"1"),(0,l.Uk)(", a"),(0,l._)("sub",null,"2"),(0,l.Uk)(", a"),(0,l._)("sub",null,"3"),(0,l.Uk)(", ...} read set consists of all variables that are read during exceution of k statements set")]),(0,l._)("li",null,[(0,l.Uk)("E(S"),(0,l._)("sub",null,"k"),(0,l.Uk)(") = {b"),(0,l._)("sub",null,"1"),(0,l.Uk)(", b"),(0,l._)("sub",null,"2"),(0,l.Uk)(", b"),(0,l._)("sub",null,"3"),(0,l.Uk)(", ...} write set consists of all variables that are written (updated) during execution of k statements set.")])],-1),Se=(0,l._)("p",null,[(0,l.Uk)("To run concurrently both statement sets S"),(0,l._)("sub",null,"i"),(0,l.Uk)(" y S"),(0,l._)("sub",null,"j"),(0,l.Uk)(" these three conditions must be set simultaneously:")],-1),Ue=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Uk)("L(S"),(0,l._)("sub",null,"i"),(0,l.Uk)(") ∩ E(S"),(0,l._)("sub",null,"j"),(0,l.Uk)(")")]),(0,l._)("li",null,[(0,l.Uk)("E(S"),(0,l._)("sub",null,"i"),(0,l.Uk)(") ∩ L(S"),(0,l._)("sub",null,"j"),(0,l.Uk)(")")]),(0,l._)("li",null,[(0,l.Uk)("E(S"),(0,l._)("sub",null,"i"),(0,l.Uk)(") ∩ E(S"),(0,l._)("sub",null,"j"),(0,l.Uk)(")")])],-1),Ee=(0,l._)("div",{class:"custom-container question"},[(0,l._)("p",{class:"custom-container-title"},"Which of these instructions can be run concurrently?"),(0,l._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,l._)("pre",{class:"shiki",style:{"background-color":"#FAFAFA"}},[(0,l._)("code",null,[(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"a "),(0,l._)("span",{style:{color:"#39ADB5"}},"="),(0,l._)("span",{style:{color:"#90A4AE"}}," x "),(0,l._)("span",{style:{color:"#39ADB5"}},"+"),(0,l._)("span",{style:{color:"#90A4AE"}}," y"),(0,l._)("span",{style:{color:"#39ADB5"}},";")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"b "),(0,l._)("span",{style:{color:"#39ADB5"}},"="),(0,l._)("span",{style:{color:"#90A4AE"}}," z "),(0,l._)("span",{style:{color:"#39ADB5"}},"-"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#F76D47"}},"1"),(0,l._)("span",{style:{color:"#39ADB5"}},";")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"c "),(0,l._)("span",{style:{color:"#39ADB5"}},"="),(0,l._)("span",{style:{color:"#90A4AE"}}," a "),(0,l._)("span",{style:{color:"#39ADB5"}},"-"),(0,l._)("span",{style:{color:"#90A4AE"}}," b"),(0,l._)("span",{style:{color:"#39ADB5"}},";")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"w "),(0,l._)("span",{style:{color:"#39ADB5"}},"="),(0,l._)("span",{style:{color:"#90A4AE"}}," c "),(0,l._)("span",{style:{color:"#39ADB5"}},"+"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#F76D47"}},"1"),(0,l._)("span",{style:{color:"#39ADB5"}},";")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"})])]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br")])])],-1),xe=(0,l._)("p",null,"First of all we must get L & E sets for each sentence",-1),De=(0,l._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,l._)("pre",{class:"shiki",style:{"background-color":"#FAFAFA"}},[(0,l._)("code",null,[(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"    L(S<sub>1</sub>) = {x, y}   E(S<sub>1</sub>) = {a}\n\n    L(S<sub>2</sub>) = {z}      E(S<sub>1</sub>) = {b}\n\n    L(S<sub>3</sub>) = {a, b}   E(S<sub>3</sub>) = {c}\n\n    L(S<sub>4</sub>) = {c}      E(S<sub>4</sub>) = {w}\n")])])]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br")])],-1),Be=(0,l._)("p",null,"And now let's apply the rules for each pair of sentences",-1),Ce=(0,l._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,l._)("pre",{class:"shiki",style:{"background-color":"#FAFAFA"}},[(0,l._)("code",null,[(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"L(S<sub>1</sub>) ∩ E(S<sub>2</sub>) = ∅\nE(S<sub>1</sub>) ∩ L(S<sub>2</sub>) = ∅\nE(S<sub>1</sub>) ∩ E(S<sub>2</sub>) = ∅         // They can be run simultaneously\n\nL(S<sub>1</sub>) ∩ E(S<sub>3</sub>) = ∅\nE(S<sub>1</sub>) ∩ L(S<sub>3</sub>) = {a} ≠ ∅\nE(S<sub>1</sub>) ∩ E(S<sub>3</sub>) = ∅         // NO\n\nL(S<sub>1</sub>) ∩ E(S<sub>4</sub>) = ∅\nE(S<sub>1</sub>) ∩ L(S<sub>4</sub>) = ∅\nE(S<sub>1</sub>) ∩ E(S<sub>4</sub>) = ∅         // They can be run simultaneously\n\nL(S<sub>2</sub>) ∩ E(S<sub>3</sub>) = ∅\nE(S<sub>2</sub>) ∩ L(S<sub>3</sub>) = ∅\nE(S<sub>2</sub>) ∩ E(S<sub>3</sub>) = ∅         // They can be run simultaneously\n\nL(S<sub>2</sub>) ∩ E(S<sub>4</sub>) = ∅\nE(S<sub>2</sub>) ∩ L(S<sub>4</sub>) = ∅\nE(S<sub>2</sub>) ∩ E(S<sub>4</sub>) = ∅         // They can be run simultaneously\n\nL(S<sub>3</sub>) ∩ E(S<sub>4</sub>) = ∅\nE(S<sub>3</sub>) ∩ L(S<sub>4</sub>) = {c} ≠ ∅\nE(S<sub>3</sub>) ∩ E(S<sub>4</sub>) = ∅         // NO\n")])])]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"19"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"20"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"21"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"22"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"23"),(0,l._)("br")])],-1),Te={render:function(e,s){const n=(0,l.up)("DownloadPDF-component"),t=(0,l.up)("DocumentCover-component"),a=(0,l.up)("RouterLink"),o=(0,l.up)("OutboundLink"),Te=(0,l.up)("Badge");return(0,l.wg)(),(0,l.iD)(l.HY,null,[(0,l.Wm)(n),(0,l.Wm)(t,{titulo:"1.2. Concurrency"}),i,(0,l._)("nav",r,[(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Wm)(a,{to:"#_1-2-1-concurrency-vs-parallelism"},{default:(0,l.w5)((()=>[u])),_:1}),(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Wm)(a,{to:"#monoprocess"},{default:(0,l.w5)((()=>[c])),_:1})]),(0,l._)("li",null,[(0,l.Wm)(a,{to:"#multitasking"},{default:(0,l.w5)((()=>[p])),_:1})]),(0,l._)("li",null,[(0,l.Wm)(a,{to:"#parallelism"},{default:(0,l.w5)((()=>[m])),_:1})])])]),(0,l._)("li",null,[(0,l.Wm)(a,{to:"#_1-2-2-distributed-systems"},{default:(0,l.w5)((()=>[_])),_:1})]),(0,l._)("li",null,[(0,l.Wm)(a,{to:"#_1-2-3-advantages-and-disadvantages"},{default:(0,l.w5)((()=>[b])),_:1})]),(0,l._)("li",null,[(0,l.Wm)(a,{to:"#_1-2-4-condiciones-de-bernstein"},{default:(0,l.w5)((()=>[d])),_:1})])])]),(0,l._)("p",null,[h,(0,l._)("a",y,[g,(0,l.Wm)(o)]),k]),f,A,v,w,S,U,E,x,D,B,C,T,F,L,I,P,W,j,z,M,O,q,H,N,R,G,J,V,Y,K,Q,X,Z,(0,l._)("ul",null,[$,ee,se,ne,(0,l._)("li",null,[le,(0,l.Wm)(Te,{type:"danger",text:"warning",vertical:"middle"})])]),te,ae,oe,ie,re,ue,ce,(0,l._)("div",pe,[me,(0,l._)("p",null,[(0,l._)("a",_e,[be,(0,l.Wm)(o)])])]),de,he,ye,ge,ke,fe,Ae,ve,we,Se,Ue,Ee,xe,De,Be,Ce],64)}}},3784:(e,s,n)=>{e.exports=n.p+"assets/img/gantt_concurrent.d7437453.svg"},9431:(e,s,n)=>{e.exports=n.p+"assets/img/gantt_parallel.06a2b959.svg"},3804:(e,s,n)=>{e.exports=n.p+"assets/img/gantt_sequential.4a72000f.svg"}}]);